#!/bin/sh

#####################################################
#   ██████╗ ███████╗██████╗ ██╗    ██╗███╗   ███╗   #
#   ██╔══██╗██╔════╝██╔══██╗██║    ██║████╗ ████║   #
#   ██████╔╝███████╗██████╔╝██║ █╗ ██║██╔████╔██║   #
#   ██╔══██╗╚════██║██╔═══╝ ██║███╗██║██║╚██╔╝██║   #
#   ██████╔╝███████║██║     ╚███╔███╔╝██║ ╚═╝ ██║   #
#   ╚═════╝ ╚══════╝╚═╝      ╚══╝╚══╝ ╚═╝     ╚═╝   # 
##################### By: zilahir  ####################
################### forked: Rxyhn  ####################

# ##############################################################################
# #                                  ENV VARS                                  # 
# ##############################################################################

## Environments
export PATH="${PATH}:${HOME}/.config/bspwm/bin"

IS_EWW_ON = false;

# Parse colors from "~/.Xresources"
xrdb -override "${HOME}/.config/misc/.Xresources"

xrdb_query()
{
    [ -n "$XRDB_QUERY" ] || XRDB_QUERY="$(xrdb -query)"

    echo "$XRDB_QUERY" | while IFS=';' read -r STRING; do
        [ "${1}" = "${STRING%%\	*}" ] || continue
        echo "${STRING##*\	}"
        break
    done
}

getcolors()
{
    #FOREGROUND="$(xrdb_query '*.foreground:')"
    BACKGROUND="$(xrdb_query '*.background:')"
    #BLACK="$(xrdb_query '*.color0:')"
    #RED="$(xrdb_query '*.color1:')"
    #GREEN="$(xrdb_query '*.color2:')"
    #YELLOW="$(xrdb_query '*.color3:')"
    #BLUE="$(xrdb_query '*.color4:')"
    #MAGENTA="$(xrdb_query '*.color5:')"
    #CYAN="$(xrdb_query '*.color6:')"
    #WHITE="$(xrdb_query '*.color7:')"
}

getcolors

# ##############################################################################
# #                                  FUNCTIONS                                 # 
# ##############################################################################

# Credits to 6gk/polka
rule() { bspc rule -a "$@" & }
config() { bspc config "$@" & }

# ##############################################################################
# #                                AUTOSTART APPS                              #
# ##############################################################################

# polybar

# killall -q polybar

$HOME/.config/polybar/launch.sh &

# Run keybindings daemon.
pgrep -x sxhkd > /dev/null || sxhkd &

# Run EWW.
# ...Check if eww is enabled
if [ "$IS_EWW_ON" = true ] ; then
  $HOME/.local/bin/eww -c $HOME/.config/eww/bar --restart open bar &
fi

# Run notification daemon.
dunst --config $HOME/.config/dunst/dunstrc &

# Run Picom.
picom --config $HOME/.config/picom/picom.conf &

# Run polkit daemon if doesn't started.
[ -n "$(pidof xfce-polkit)" ] || /usr/lib/xfce-polkit/xfce-polkit &

# Run power manager.
xfce4-power-manager &

# Run mpd if doesn't started.
[ -n "$(pidof mpd)" ] || mpd &

# Execute bspwm-specific scripts.
bspfloat &

# Start X wallpaper.
feh --no-fehbg --bg-fill $HOME/wallpapers/bg.jpg


# Fix cursor.
xsetroot -cursor_name left_ptr 

# ##############################################################################
# #                                 WINDOW RULES                               #
# #############################################################################

bspc monitor eDP -d 1 2 3 4 5

bspc monitor HDMI-A-0 -d 6 7 8 9 10

INTERNAL_MONITOR="eDP"
EXTERNAL_MONITOR="HDMI-A-0"

if [[ $(xrandr -q | grep "${EXTERNAL_MONITOR} connected") ]]; then
  # set xrandr rules for docked setup
  xrandr --output "$INTERNAL_MONITOR" --mode 1920x1080 --pos 0x0 --rotate normal --output "$EXTERNAL_MONITOR" --primary --mode 1920x1080 --pos 1920x0 --rotate normal  --left-of eDP
  if [[ $(bspc query -D -m "${EXTERNAL_MONITOR}" | wc -l) -ne 5 ]]; then
    monitor_add
  fi
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
else
  # set xrandr rules for mobile setup
  xrandr --output "$INTERNAL_MONITOR" --primary --mode 1920x1080 --pos 0x0 --rotate normal --output "$EXTERNAL_MONITOR" --off
  if [[ $(bspc query -D -m "${INTERNAL_MONITOR}" | wc -l) -ne 10 ]]; then
    monitor_remove
  fi
fi

monitor_add() {
  # Move first 5 desktops to external monitor
  for desktop in $(bspc query -D --names -m "$INTERNAL_MONITOR" | sed 5q); do
    bspc desktop "$desktop" --to-monitor "$EXTERNAL_MONITOR"
  done

  # Remove default desktop created by bspwm
  bspc desktop Desktop --remove

  # reorder monitors
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
}

monitor_remove() {
  # Add default temp desktop because a minimum of one desktop is required per monitor
  bspc monitor "$EXTERNAL_MONITOR" -a Desktop

  # Move all desktops except the last default desktop to internal monitor
  for desktop in $(bspc query -D -m "$EXTERNAL_MONITOR");	do
    bspc desktop "$desktop" --to-monitor "$INTERNAL_MONITOR"
  done

  # delete default desktops
  bspc desktop Desktop --remove

  # reorder desktops
  bspc monitor "$INTERNAL_MONITOR" -o 1 2 3 4 5
}

bspc config remove_unplugged_monitors = true

rule -a kitty                       follow=on focus=on
rule -a Code                        follow=on focus=on
rule -a firefox                     follow=on focus=on
rule mpv                            state=floating
rule feh                            state=floating

# ##############################################################################
# #                            GENERAL CONFIGURATION                           #
# ##############################################################################

#bspc subscribe node_state | while read -r _ _ _ _ state flag; do
#    if [ "$state" != "fullscreen" ]; then
#        continue
#    fi
#    if [ "$flag" == on ]; then
        #$HOME/.local/bin/eww -c $HOME/.config/eww/bar close-all
#  else
        #$HOME/.local/bin/eww -c $HOME/.config/eww/bar open bar
#    fi
#done &


LEFT_PADDING=0 && [[ "$IS_EWW_ON" = true ]] && LEFT_PADDING=46
config left_padding "$LEFT_PADDING"
config border_width 0.5
config window_gap 10
bspc config border_radius 30
# bspc config ignore_ewmh_struts true
config split_ratio 0.50

config borderless_monocle true
config gapless_monocle true
config focus_follows_pointer true

bspc config normal_border_color "$BACKGROUND"
bspc config focused_border_color "$BACKGROUND"
config presel_feedback_color "$BACKGROUND"
pkill borders ; borders &
